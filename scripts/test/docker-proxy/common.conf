#Testing server
#log_format proxy_format '$remote_addr - $remote_user [$time_local] '
#                             '"$request" $status $body_bytes_sent '
#                             '"$request_body" '
#                             '"$http_referer" "$http_user_agent"'
#                             'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"';
#log_format proxy_format '[$time_local] $remote_addr->$http_host "$request" $status '
#                             'request_body: "$request_body"; resp_body:"$resp_body"';
log_format proxy_format escape=json '{"time":"$time_local",'
                                    '"route": "$remote_addr->$http_host",'
                                    '"request": "$request",'
                                    '"status": "$status",'
                                    '"request_body": $request_body,'
                                    '"response_body":$resp_body}';

access_log /logs/proxy_access.log proxy_format;
error_log /logs/proxy_error.log;
server_names_hash_bucket_size  128;
lua_need_request_body on;

#resolver 127.0.0.11;
#server {
#  listen       80 default_server;
#  listen       [::]:80 default_server;

#  server_name  _;
#  root         /usr/share/nginx/html;

#  location / {
#  }
#}

server {
	server_name api.ipapi.com;
	listen 80;
  set $resp_body "";
  body_filter_by_lua '
      local resp_body = string.sub(ngx.arg[1], 1, 1000)
      ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
      if ngx.arg[2] then
          ngx.var.resp_body = ngx.ctx.buffered
      end
  ';
	location ~ ^/api/172.24.24.4$ {
		default_type application/json;
    	return 200 '{"ip": "172.24.24.4", "zip": "700000", "city": "Ho Chi Minh City", "type": "ipv4", "currency": {"code": "VND", "name": "Vietnamese Dong", "plural": "Vietnamese dong", "symbol": "â‚«", "symbol_native": "â‚«"}, "latitude": 10.779999732971191, "location": {"is_eu": false, "capital": "Hanoi", "languages": [{"code": "vi", "name": "Vietnamese", "native": "Tiáº¿ng Viá»‡t"}], "geoname_id": 1566083, "calling_code": "84", "country_flag": "https://assets.ipstack.com/flags/vn.svg", "country_flag_emoji": "ðŸ‡»ðŸ‡³", "country_flag_emoji_unicode": "U+1F1FB U+1F1F3"}, "longitude": 106.65499877929688, "time_zone": {"id": "Asia/Ho_Chi_Minh", "code": "+07", "gmt_offset": 25200, "current_time": "2022-07-13T15:20:06+07:00", "is_daylight_saving": false}, "connection": {"asn": 45899, "isp": "Vnpt Corp"}, "region_code": "SG", "region_name": "Ho Chi Minh", "country_code": "VN", "country_name": "Vietnam", "continent_code": "AS", "continent_name": "Asia"}';
	}
    location ~ ^/api/172.24.24.3$ {
		default_type application/json;
    	return 200 '{"ip": "172.24.24.3", "zip": "700000", "city": "Ho Chi Minh City", "type": "ipv4", "currency": {"code": "VND", "name": "Vietnamese Dong", "plural": "Vietnamese dong", "symbol": "â‚«", "symbol_native": "â‚«"}, "latitude": 10.779999732971191, "location": {"is_eu": false, "capital": "Hanoi", "languages": [{"code": "vi", "name": "Vietnamese", "native": "Tiáº¿ng Viá»‡t"}], "geoname_id": 1566083, "calling_code": "84", "country_flag": "https://assets.ipstack.com/flags/vn.svg", "country_flag_emoji": "ðŸ‡»ðŸ‡³", "country_flag_emoji_unicode": "U+1F1FB U+1F1F3"}, "longitude": 106.65499877929688, "time_zone": {"id": "Asia/Ho_Chi_Minh", "code": "+07", "gmt_offset": 25200, "current_time": "2022-07-13T15:20:06+07:00", "is_daylight_saving": false}, "connection": {"asn": 45899, "isp": "Vnpt Corp"}, "region_code": "SG", "region_name": "Ho Chi Minh", "country_code": "VN", "country_name": "Vietnam", "continent_code": "AS", "continent_name": "Asia"}';
	}
}

# http://worker01.fisherman.massbitroute.net
server {
  listen       443 ssl;
  listen       4040;
  ssl_certificate /etc/letsencrypt/live/fisherman.massbitroute.net/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/fisherman.massbitroute.net/privkey.pem;
  server_name worker01.fisherman.massbitroute.net;
  set $resp_body "";
  body_filter_by_lua '
      local resp_body = string.sub(ngx.arg[1], 1, 1000)
      ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
      if ngx.arg[2] then
          ngx.var.resp_body = ngx.ctx.buffered
      end
  ';
  location / {
      proxy_pass  $scheme://172.24.24.213:4040; # desired IP
      proxy_set_header Host worker01.fisherman.massbitroute.net; # desired host
      #proxy_pass  $scheme://worker01.fisherman.massbitroute.net; # desired IP
      proxy_ssl_verify              off;
  }
}
# http://worker02.fisherman.massbitroute.net
server {
  listen       443 ssl;
  listen       4040;
  ssl_certificate /etc/letsencrypt/live/fisherman.massbitroute.net/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/fisherman.massbitroute.net/privkey.pem;
  server_name worker02.fisherman.massbitroute.net;
  set $resp_body "";
  body_filter_by_lua '
      local resp_body = string.sub(ngx.arg[1], 1, 1000)
      ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
      if ngx.arg[2] then
          ngx.var.resp_body = ngx.ctx.buffered
      end
  ';
  location / {
      proxy_pass  $scheme://172.24.24.214:4040; # desired IP
      proxy_set_header Host worker02.fisherman.massbitroute.net; # desired host
      #proxy_pass  $scheme://worker02.fisherman.massbitroute.net; # desired IP
      proxy_ssl_verify              off;
  }
}

# http://chain.massbitroute.net
server {
  listen       443 ssl;
  listen        9944;
  ssl_certificate /etc/letsencrypt/live/massbitroute.net/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/massbitroute.net/privkey.pem;
  server_name chain.massbitroute.net;
  set $resp_body "";
  body_filter_by_lua '
      local resp_body = string.sub(ngx.arg[1], 1, 1000)
      ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
      if ngx.arg[2] then
          ngx.var.resp_body = ngx.ctx.buffered
      end
  ';
  location / {
      proxy_http_version 1.1;
      proxy_pass  $scheme://172.24.24.205:9944; # desired IP
      proxy_set_header Host chain.massbitroute.net; # desired host
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
      proxy_ssl_verify              off;
  }
}
